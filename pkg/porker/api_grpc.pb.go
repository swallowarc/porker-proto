// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package porker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PorkerServiceClient is the client API for PorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PorkerServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*NoBody, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	CanEnterRoom(ctx context.Context, in *CanEnterRoomRequest, opts ...grpc.CallOption) (*CanEnterRoomResponse, error)
	EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (PorkerService_EnterRoomClient, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*NoBody, error)
	Voting(ctx context.Context, in *VotingRequest, opts ...grpc.CallOption) (*NoBody, error)
	VoteCounting(ctx context.Context, in *VoteCountingRequest, opts ...grpc.CallOption) (*NoBody, error)
	ResetRoom(ctx context.Context, in *ResetRoomRequest, opts ...grpc.CallOption) (*NoBody, error)
}

type porkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPorkerServiceClient(cc grpc.ClientConnInterface) PorkerServiceClient {
	return &porkerServiceClient{cc}
}

func (c *porkerServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) CanEnterRoom(ctx context.Context, in *CanEnterRoomRequest, opts ...grpc.CallOption) (*CanEnterRoomResponse, error) {
	out := new(CanEnterRoomResponse)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/CanEnterRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (PorkerService_EnterRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &PorkerService_ServiceDesc.Streams[0], "/porker.PorkerService/EnterRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &porkerServiceEnterRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PorkerService_EnterRoomClient interface {
	Recv() (*PokerSituation, error)
	grpc.ClientStream
}

type porkerServiceEnterRoomClient struct {
	grpc.ClientStream
}

func (x *porkerServiceEnterRoomClient) Recv() (*PokerSituation, error) {
	m := new(PokerSituation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *porkerServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/LeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) Voting(ctx context.Context, in *VotingRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/Voting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) VoteCounting(ctx context.Context, in *VoteCountingRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/VoteCounting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porkerServiceClient) ResetRoom(ctx context.Context, in *ResetRoomRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/porker.PorkerService/ResetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PorkerServiceServer is the server API for PorkerService service.
// All implementations must embed UnimplementedPorkerServiceServer
// for forward compatibility
type PorkerServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*NoBody, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	CanEnterRoom(context.Context, *CanEnterRoomRequest) (*CanEnterRoomResponse, error)
	EnterRoom(*EnterRoomRequest, PorkerService_EnterRoomServer) error
	LeaveRoom(context.Context, *LeaveRoomRequest) (*NoBody, error)
	Voting(context.Context, *VotingRequest) (*NoBody, error)
	VoteCounting(context.Context, *VoteCountingRequest) (*NoBody, error)
	ResetRoom(context.Context, *ResetRoomRequest) (*NoBody, error)
	mustEmbedUnimplementedPorkerServiceServer()
}

// UnimplementedPorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPorkerServiceServer struct {
}

func (UnimplementedPorkerServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPorkerServiceServer) Logout(context.Context, *LogoutRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPorkerServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedPorkerServiceServer) CanEnterRoom(context.Context, *CanEnterRoomRequest) (*CanEnterRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanEnterRoom not implemented")
}
func (UnimplementedPorkerServiceServer) EnterRoom(*EnterRoomRequest, PorkerService_EnterRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method EnterRoom not implemented")
}
func (UnimplementedPorkerServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedPorkerServiceServer) Voting(context.Context, *VotingRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voting not implemented")
}
func (UnimplementedPorkerServiceServer) VoteCounting(context.Context, *VoteCountingRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCounting not implemented")
}
func (UnimplementedPorkerServiceServer) ResetRoom(context.Context, *ResetRoomRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRoom not implemented")
}
func (UnimplementedPorkerServiceServer) mustEmbedUnimplementedPorkerServiceServer() {}

// UnsafePorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PorkerServiceServer will
// result in compilation errors.
type UnsafePorkerServiceServer interface {
	mustEmbedUnimplementedPorkerServiceServer()
}

func RegisterPorkerServiceServer(s grpc.ServiceRegistrar, srv PorkerServiceServer) {
	s.RegisterService(&PorkerService_ServiceDesc, srv)
}

func _PorkerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_CanEnterRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanEnterRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).CanEnterRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/CanEnterRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).CanEnterRoom(ctx, req.(*CanEnterRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_EnterRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnterRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PorkerServiceServer).EnterRoom(m, &porkerServiceEnterRoomServer{stream})
}

type PorkerService_EnterRoomServer interface {
	Send(*PokerSituation) error
	grpc.ServerStream
}

type porkerServiceEnterRoomServer struct {
	grpc.ServerStream
}

func (x *porkerServiceEnterRoomServer) Send(m *PokerSituation) error {
	return x.ServerStream.SendMsg(m)
}

func _PorkerService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_Voting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).Voting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/Voting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).Voting(ctx, req.(*VotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_VoteCounting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteCountingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).VoteCounting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/VoteCounting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).VoteCounting(ctx, req.(*VoteCountingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PorkerService_ResetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorkerServiceServer).ResetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porker.PorkerService/ResetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorkerServiceServer).ResetRoom(ctx, req.(*ResetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PorkerService_ServiceDesc is the grpc.ServiceDesc for PorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "porker.PorkerService",
	HandlerType: (*PorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PorkerService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PorkerService_Logout_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _PorkerService_CreateRoom_Handler,
		},
		{
			MethodName: "CanEnterRoom",
			Handler:    _PorkerService_CanEnterRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _PorkerService_LeaveRoom_Handler,
		},
		{
			MethodName: "Voting",
			Handler:    _PorkerService_Voting_Handler,
		},
		{
			MethodName: "VoteCounting",
			Handler:    _PorkerService_VoteCounting_Handler,
		},
		{
			MethodName: "ResetRoom",
			Handler:    _PorkerService_ResetRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnterRoom",
			Handler:       _PorkerService_EnterRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "porker/api.proto",
}
